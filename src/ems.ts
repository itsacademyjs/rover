import { Command } from "commander";
import chalk from "chalk";
import { SyncConfiguration } from "./types";
import { TestSuite } from "./models";

const mongoose = require("mongoose");
const fs = require("fs");

const syncExercises = async (configuration: SyncConfiguration) => {
    const file = configuration.file ?? "meta.json";
    const rawdata = fs.readFileSync(file);
    const data = JSON.parse(rawdata).suites[0].suites.map((suite) => ({
        title: suite.title,
        description: suite.description,
        handle: suite.handle,
        testCases: suite.tests.map((test) => ({
            title: test.title,
            description: test.description,
        })),
    }));

    mongoose.connect("mongodb://localhost:27017/test");
    const syncData = new TestSuite(data);
    await syncData.save();
    console.log("Exercises synced");
    return;
};

const configureCommands = (): Command => {
    const program = new Command();
    program.version("0.1.0");

    const syncCommand = new Command();
    syncCommand
        .name("sync")
        .argument("[file]", "the json file generated by meta command", null)
        .alias("s")
        .description("sync exercises with the database")
        .action(async (file: string | null) => {
            const configuration = {
                file,
                ...program.opts(),
                ...syncCommand.opts(),
            } as SyncConfiguration;
            await syncExercises(configuration);
        });
    program.addCommand(syncCommand);

    program.option(
        "-f, --exercise-file <file>",
        "specify the exercise file",
        "rover.json"
    );

    return program;
};

const packageData = require("../../package");

const main = () => {
    console.log(
        chalk.bold(
            `rover ${packageData.version} ${chalk.greenBright(
                "(https://academyjs.com/rover)"
            )}`
        )
    );
    const program = configureCommands();
    program.parse(process.argv);
};

export { main };

// execute("node", ["./hello.js"], {
//     standardOutputEncoding: "utf8",
//     standardOutputLimit: 65 * 1024,
//     standardErrorEncoding: "utf8",
//     standardErrorLimit: 65 * 1024,
//     timeout: 1000 * 3,
// })
//     .then((result) => console.log(result))
//     .catch(console.log);
