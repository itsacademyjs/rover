import { Command } from "commander";
import chalk from "chalk";
import fs from "fs";

import { Excercise, Configuration } from "./types";
import { readJSONFile } from "./util";
import validators from "./validators";

const exercise: Excercise = {
    id: "507f1f77bcf86cd799439011",
    handle: "node/factorial",
    statement: `Factorial of a non-negative integer, is multiplication of all integers smaller than or equal to n.
For example factorial of 6 is 6 * 5 * 4 * 3 * 2 * 1 which is 720.

Factorial can be calculated iteratively or recursively. You can solve using any approach.`,
    tests: [
        {
            description: "Calculate the factorial of the specified integer",
            validator: "ss-validator/v1",
            options: {
                input: "5\n",
                expectedOutput: "Enter an integer: 120\n",
            },
        },
        {
            description: "Install Node v16.9.1",
            validator: "node-validator/v1",
            options: {
                nodeVersion: "v16.9.1",
            },
        },
        {
            description: "Write the source code in 'index.js'",
            validator: "fs-validator/v1",
            options: {
                exists: ["./index.js"],
            },
        },
    ],
};

const downloadProblems = (handle: string) => {
    console.log(`Fetching excercise ${handle}...`);

    setTimeout(async () => {
        const json = JSON.stringify(exercise, null, 4);
        await fs.promises.writeFile("rover.json", json, { encoding: "utf8" });
        console.log(`Done. Let's get this party started!`);
    });
};

const validateSolution = async (configuration: Configuration) => {
    const { tests } = (await readJSONFile(
        configuration.exerciseFile
    )) as Excercise;
    for (const test of tests) {
        const { validator, options, description } = test;
        if (Object.prototype.hasOwnProperty.call(validators, validator)) {
            const validatorFunction = validators[validator];
            const result = await validatorFunction(options, configuration);
            console.log(
                ` ${
                    result ? chalk.greenBright("✓") : chalk.redBright("✕")
                }  ${description}\n`
            );
        } else {
            console.log(
                ` ${chalk.redBright(
                    "✕"
                )}  Cannot find validator ${chalk.whiteBright.bold(
                    validator
                )}.\n    Try updating Rover to fix the issue.`
            );
        }
    }
    console.log("Done");
};

const configureCommands = (): Command => {
    const program = new Command();
    program.version("0.1.0");

    const submitCommand = new Command();
    submitCommand
        .name("submit")
        .option(
            "--std-error",
            "print the standard error generated by the solution",
            false
        )
        .option(
            "--std-output",
            "print the standard output generated by the solution",
            false
        )
        .alias("x")
        .description("validate your solution and submit the results")
        .action(async () => {
            const options = {
                ...program.opts(),
                ...submitCommand.opts(),
            } as Configuration;
            await validateSolution(options);
        });
    program.addCommand(submitCommand, { isDefault: true });

    program
        .command("solving")
        .alias("s")
        .argument("<handle>", "the handle for the exercise")
        .description("identify the excercise being solved")
        .action((handle: string) => {
            downloadProblems(handle);
        });
    program.option(
        "-f, --exercise-file <file>",
        "specify the exercise file",
        "rover.json"
    );

    return program;
};

const VERSION = "v0.1.0";

const main = () => {
    console.log(chalk.bold(`rover ${VERSION}`));
    const program = configureCommands();
    program.parse(process.argv);
};

main();

// execute("node", ["./hello.js"], {
//     standardOutputEncoding: "utf8",
//     standardOutputLimit: 65 * 1024,
//     standardErrorEncoding: "utf8",
//     standardErrorLimit: 65 * 1024,
//     timeout: 1000 * 3,
// })
//     .then((result) => console.log(result))
//     .catch(console.log);
