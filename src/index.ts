import { Command } from "commander";
import chalk from "chalk";

import Driver from "./driver/mocha";
import {
    Excercise,
    Configuration,
    AssertFunction,
    AssertionResult,
    OutputAssertionResult,
} from "./types";
import * as assertions from "./assertions";
import excercises from "./excercises";

const printLines = (prefix: string = "", text: string, suffix: string = "") => {
    process.stdout.write(
        text
            .split("\n")
            .map((line) => `${prefix}${line}${suffix}`)
            .join("\n")
    );
    console.log("\n");
};

const validateSolution = async (
    handle: string,
    configuration: Configuration
) => {
    const driver = new Driver({
        // dryRun: false,
    });
    driver.addFile("./test");
    driver.run((errors) => console.log(errors));
    // driver.collect();
};

const configureCommands = (): Command => {
    const program = new Command();
    program.version("0.1.0");

    const submitCommand = new Command();
    submitCommand
        .name("submit")
        .argument("<handle>", "the handle for the exercise")
        .option(
            "--std-error",
            "print the standard error generated by the solution",
            true
        )
        .option(
            "--std-output",
            "print the standard output generated by the solution",
            true
        )
        .alias("x")
        .description("validate your solution and submit the results")
        .action(async (handle: string) => {
            const configuration = {
                ...program.opts(),
                ...submitCommand.opts(),
            } as Configuration;
            await validateSolution(handle, configuration);
        });
    program.addCommand(submitCommand);
    program.option(
        "-f, --exercise-file <file>",
        "specify the exercise file",
        "rover.json"
    );

    return program;
};

const VERSION = "v0.1.0";

const main = () => {
    console.log(chalk.bold(`rover ${VERSION}`));
    const program = configureCommands();
    program.parse(process.argv);
};

export { main };

// execute("node", ["./hello.js"], {
//     standardOutputEncoding: "utf8",
//     standardOutputLimit: 65 * 1024,
//     standardErrorEncoding: "utf8",
//     standardErrorLimit: 65 * 1024,
//     timeout: 1000 * 3,
// })
//     .then((result) => console.log(result))
//     .catch(console.log);
